
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lucile.Dynamic.Test.Dynamic.Test
{
    public partial class AvdMask : ValidationBase, IHasIdentifier
    {

        partial void OnIdChanging(System.Int64 oldValue, System.Int64 newValue, ref bool handled);
        partial void OnIdChanged();
        private System.Int64 valId;

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Int64 Id
        {
            get
            {
                return valId;
            }
            set
            {
                if (valId != value)

                {
                    bool handled = false;
                    OnIdChanging(valId, value, ref handled);
                    if (!handled)
                    {
                        valId = value;
                        OnIdChanged();
                        RaisePropertyChanged("Id");
                    }
                }
            }
        }

        partial void OnNameChanging(System.String oldValue, System.String newValue, ref bool handled);
        partial void OnNameChanged();
        private System.String valName;

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.String Name
        {
            get
            {
                return valName;
            }
            set
            {
                if (valName != value)

                {
                    bool handled = false;
                    OnNameChanging(valName, value, ref handled);
                    if (!handled)
                    {
                        valName = value;
                        OnNameChanged();
                        RaisePropertyChanged("Name");
                    }
                }
            }
        }

        partial void OnDescriptionChanging(System.String oldValue, System.String newValue, ref bool handled);
        partial void OnDescriptionChanged();
        private System.String valDescription;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.String Description
        {
            get
            {
                return valDescription;
            }
            set
            {
                if (valDescription != value)

                {
                    bool handled = false;
                    OnDescriptionChanging(valDescription, value, ref handled);
                    if (!handled)
                    {
                        valDescription = value;
                        OnDescriptionChanged();
                        RaisePropertyChanged("Description");
                    }
                }
            }
        }

        partial void OnElementsChanging(System.Collections.Generic.ICollection<FrequencyRangeElement> oldValue, System.Collections.Generic.ICollection<FrequencyRangeElement> newValue, ref bool handled);
        partial void OnElementsChanged();
        private System.Collections.Generic.ICollection<FrequencyRangeElement> valElements;

        public System.Collections.Generic.ICollection<FrequencyRangeElement> Elements
        {
            get
            {
                return valElements;
            }
            set
            {
                if (valElements != value)

                {
                    bool handled = false;
                    OnElementsChanging(valElements, value, ref handled);
                    if (!handled)
                    {
                        valElements = value;
                        OnElementsChanged();
                        RaisePropertyChanged("Elements");
                    }
                }
            }
        }
    }
}
namespace Lucile.Dynamic.Test.Dynamic.Test
{
    public partial class FrequencyRangeElement : ValidationBase, IHasIdentifier
    {

        partial void OnIdChanging(System.Int64 oldValue, System.Int64 newValue, ref bool handled);
        partial void OnIdChanged();
        private System.Int64 valId;

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Int64 Id
        {
            get
            {
                return valId;
            }
            set
            {
                if (valId != value)

                {
                    bool handled = false;
                    OnIdChanging(valId, value, ref handled);
                    if (!handled)
                    {
                        valId = value;
                        OnIdChanged();
                        RaisePropertyChanged("Id");
                    }
                }
            }
        }

        partial void OnAvdMaskIdChanging(System.Int64 oldValue, System.Int64 newValue, ref bool handled);
        partial void OnAvdMaskIdChanged();
        private System.Int64 valAvdMaskId;

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Int64 AvdMaskId
        {
            get
            {
                return valAvdMaskId;
            }
            set
            {
                if (valAvdMaskId != value)

                {
                    bool handled = false;
                    OnAvdMaskIdChanging(valAvdMaskId, value, ref handled);
                    if (!handled)
                    {
                        valAvdMaskId = value;
                        OnAvdMaskIdChanged();
                        RaisePropertyChanged("AvdMaskId");
                    }
                }
            }
        }

        partial void OnAvdMaskChanging(AvdMask oldValue, AvdMask newValue, ref bool handled);
        partial void OnAvdMaskChanged();
        private AvdMask valAvdMask;

        public AvdMask AvdMask
        {
            get
            {
                return valAvdMask;
            }
            set
            {
                if (valAvdMask != value)

                {
                    bool handled = false;
                    OnAvdMaskChanging(valAvdMask, value, ref handled);
                    if (!handled)
                    {
                        valAvdMask = value;
                        OnAvdMaskChanged();
                        RaisePropertyChanged("AvdMask");
                    }
                }
            }
        }

        partial void OnNameChanging(System.String oldValue, System.String newValue, ref bool handled);
        partial void OnNameChanged();
        private System.String valName;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.String Name
        {
            get
            {
                return valName;
            }
            set
            {
                if (valName != value)

                {
                    bool handled = false;
                    OnNameChanging(valName, value, ref handled);
                    if (!handled)
                    {
                        valName = value;
                        OnNameChanged();
                        RaisePropertyChanged("Name");
                    }
                }
            }
        }

        partial void OnSignalExpectedChanging(System.Boolean oldValue, System.Boolean newValue, ref bool handled);
        partial void OnSignalExpectedChanged();
        private System.Boolean valSignalExpected;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Boolean SignalExpected
        {
            get
            {
                return valSignalExpected;
            }
            set
            {
                if (valSignalExpected != value)

                {
                    bool handled = false;
                    OnSignalExpectedChanging(valSignalExpected, value, ref handled);
                    if (!handled)
                    {
                        valSignalExpected = value;
                        OnSignalExpectedChanged();
                        RaisePropertyChanged("SignalExpected");
                    }
                }
            }
        }

        partial void OnLowerBorderChanging(System.Double oldValue, System.Double newValue, ref bool handled);
        partial void OnLowerBorderChanged();
        private System.Double valLowerBorder;

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Double LowerBorder
        {
            get
            {
                return valLowerBorder;
            }
            set
            {
                if (valLowerBorder != value)

                {
                    bool handled = false;
                    OnLowerBorderChanging(valLowerBorder, value, ref handled);
                    if (!handled)
                    {
                        valLowerBorder = value;
                        OnLowerBorderChanged();
                        RaisePropertyChanged("LowerBorder");
                    }
                }
            }
        }

        partial void OnUpperBorderChanging(System.Double oldValue, System.Double newValue, ref bool handled);
        partial void OnUpperBorderChanged();
        private System.Double valUpperBorder;

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Double UpperBorder
        {
            get
            {
                return valUpperBorder;
            }
            set
            {
                if (valUpperBorder != value)

                {
                    bool handled = false;
                    OnUpperBorderChanging(valUpperBorder, value, ref handled);
                    if (!handled)
                    {
                        valUpperBorder = value;
                        OnUpperBorderChanged();
                        RaisePropertyChanged("UpperBorder");
                    }
                }
            }
        }

        partial void OnExpectedSignalLevelChanging(System.Nullable<System.Double> oldValue, System.Nullable<System.Double> newValue, ref bool handled);
        partial void OnExpectedSignalLevelChanged();
        private System.Nullable<System.Double> valExpectedSignalLevel;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Double> ExpectedSignalLevel
        {
            get
            {
                return valExpectedSignalLevel;
            }
            set
            {
                if (valExpectedSignalLevel != value)

                {
                    bool handled = false;
                    OnExpectedSignalLevelChanging(valExpectedSignalLevel, value, ref handled);
                    if (!handled)
                    {
                        valExpectedSignalLevel = value;
                        OnExpectedSignalLevelChanged();
                        RaisePropertyChanged("ExpectedSignalLevel");
                    }
                }
            }
        }

        partial void OnUpperToleranceBorderChanging(System.Nullable<System.Double> oldValue, System.Nullable<System.Double> newValue, ref bool handled);
        partial void OnUpperToleranceBorderChanged();
        private System.Nullable<System.Double> valUpperToleranceBorder;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Double> UpperToleranceBorder
        {
            get
            {
                return valUpperToleranceBorder;
            }
            set
            {
                if (valUpperToleranceBorder != value)

                {
                    bool handled = false;
                    OnUpperToleranceBorderChanging(valUpperToleranceBorder, value, ref handled);
                    if (!handled)
                    {
                        valUpperToleranceBorder = value;
                        OnUpperToleranceBorderChanged();
                        RaisePropertyChanged("UpperToleranceBorder");
                    }
                }
            }
        }

        partial void OnLowerToleranceBorderChanging(System.Nullable<System.Double> oldValue, System.Nullable<System.Double> newValue, ref bool handled);
        partial void OnLowerToleranceBorderChanged();
        private System.Nullable<System.Double> valLowerToleranceBorder;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Double> LowerToleranceBorder
        {
            get
            {
                return valLowerToleranceBorder;
            }
            set
            {
                if (valLowerToleranceBorder != value)

                {
                    bool handled = false;
                    OnLowerToleranceBorderChanging(valLowerToleranceBorder, value, ref handled);
                    if (!handled)
                    {
                        valLowerToleranceBorder = value;
                        OnLowerToleranceBorderChanged();
                        RaisePropertyChanged("LowerToleranceBorder");
                    }
                }
            }
        }

        partial void OnAlarmThresholdInSecondsChanging(System.Nullable<System.Double> oldValue, System.Nullable<System.Double> newValue, ref bool handled);
        partial void OnAlarmThresholdInSecondsChanged();
        private System.Nullable<System.Double> valAlarmThresholdInSeconds;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Double> AlarmThresholdInSeconds
        {
            get
            {
                return valAlarmThresholdInSeconds;
            }
            set
            {
                if (valAlarmThresholdInSeconds != value)

                {
                    bool handled = false;
                    OnAlarmThresholdInSecondsChanging(valAlarmThresholdInSeconds, value, ref handled);
                    if (!handled)
                    {
                        valAlarmThresholdInSeconds = value;
                        OnAlarmThresholdInSecondsChanged();
                        RaisePropertyChanged("AlarmThresholdInSeconds");
                    }
                }
            }
        }

        partial void OnUseNoiseFloorChanging(System.Boolean oldValue, System.Boolean newValue, ref bool handled);
        partial void OnUseNoiseFloorChanged();
        private System.Boolean valUseNoiseFloor;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Boolean UseNoiseFloor
        {
            get
            {
                return valUseNoiseFloor;
            }
            set
            {
                if (valUseNoiseFloor != value)

                {
                    bool handled = false;
                    OnUseNoiseFloorChanging(valUseNoiseFloor, value, ref handled);
                    if (!handled)
                    {
                        valUseNoiseFloor = value;
                        OnUseNoiseFloorChanged();
                        RaisePropertyChanged("UseNoiseFloor");
                    }
                }
            }
        }
    }
}
