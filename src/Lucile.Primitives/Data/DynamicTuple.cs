//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GitVersion
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace Lucile.Data
{
	public abstract class DynamicTuple
	{
		public virtual object GetValue(int index)
		{
			throw new IndexOutOfRangeException($"Invalid value index {index} for tuple.");
		}

		public virtual void SetValue(int index, object value)
		{
			throw new IndexOutOfRangeException($"Invalid value index {index} for tuple.");
		}

		public static Type GetTupleType(params Type[] types){
			switch(types.Length){
				case 1:
					return typeof(DynamicTuple<>).MakeGenericType(types); 
				case 2:
					return typeof(DynamicTuple<,>).MakeGenericType(types); 
				case 3:
					return typeof(DynamicTuple<,,>).MakeGenericType(types); 
				case 4:
					return typeof(DynamicTuple<,,,>).MakeGenericType(types); 
				case 5:
					return typeof(DynamicTuple<,,,,>).MakeGenericType(types); 
				case 6:
					return typeof(DynamicTuple<,,,,,>).MakeGenericType(types); 
				case 7:
					return typeof(DynamicTuple<,,,,,,>).MakeGenericType(types); 
				case 8:
					return typeof(DynamicTuple<,,,,,,,>).MakeGenericType(types); 
				case 9:
					return typeof(DynamicTuple<,,,,,,,,>).MakeGenericType(types); 
				case 10:
					return typeof(DynamicTuple<,,,,,,,,,>).MakeGenericType(types); 
			}

			throw new InvalidOperationException($"The minimum is 1 and the maximus are 400 Properties for dynamic tuples.");
		}

		public static DynamicTuple Get(params Type[] types){
			return (DynamicTuple)Activator.CreateInstance(GetTupleType(types)); 
		}
	}
	public class DynamicTuple<T0> 
		: DynamicTuple
	{
		public T0 Value0 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 0){
				return Value0;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 0){
				Value0 = (T0)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1> 
		: DynamicTuple<T0>
	{
		public T1 Value1 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 1){
				return Value1;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 1){
				Value1 = (T1)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2> 
		: DynamicTuple<T0, T1>
	{
		public T2 Value2 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 2){
				return Value2;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 2){
				Value2 = (T2)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3> 
		: DynamicTuple<T0, T1, T2>
	{
		public T3 Value3 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 3){
				return Value3;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 3){
				Value3 = (T3)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4> 
		: DynamicTuple<T0, T1, T2, T3>
	{
		public T4 Value4 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 4){
				return Value4;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 4){
				Value4 = (T4)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5> 
		: DynamicTuple<T0, T1, T2, T3, T4>
	{
		public T5 Value5 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 5){
				return Value5;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 5){
				Value5 = (T5)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5>
	{
		public T6 Value6 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 6){
				return Value6;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 6){
				Value6 = (T6)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6>
	{
		public T7 Value7 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 7){
				return Value7;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 7){
				Value7 = (T7)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7>
	{
		public T8 Value8 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 8){
				return Value8;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 8){
				Value8 = (T8)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>
	{
		public T9 Value9 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 9){
				return Value9;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 9){
				Value9 = (T9)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
}