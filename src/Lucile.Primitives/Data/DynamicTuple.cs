//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GitVersion
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace Lucile.Data
{
	public abstract class DynamicTuple
	{
		public virtual object GetValue(int index)
		{
			throw new IndexOutOfRangeException($"Invalid value index {index} for tuple.");
		}

		public virtual void SetValue(int index, object value)
		{
			throw new IndexOutOfRangeException($"Invalid value index {index} for tuple.");
		}

		public static Type GetTupleType(params Type[] types){
			switch(types.Length){
				case 1:
					return typeof(DynamicTuple<>).MakeGenericType(types); 
				case 2:
					return typeof(DynamicTuple<,>).MakeGenericType(types); 
				case 3:
					return typeof(DynamicTuple<,,>).MakeGenericType(types); 
				case 4:
					return typeof(DynamicTuple<,,,>).MakeGenericType(types); 
				case 5:
					return typeof(DynamicTuple<,,,,>).MakeGenericType(types); 
				case 6:
					return typeof(DynamicTuple<,,,,,>).MakeGenericType(types); 
				case 7:
					return typeof(DynamicTuple<,,,,,,>).MakeGenericType(types); 
				case 8:
					return typeof(DynamicTuple<,,,,,,,>).MakeGenericType(types); 
				case 9:
					return typeof(DynamicTuple<,,,,,,,,>).MakeGenericType(types); 
				case 10:
					return typeof(DynamicTuple<,,,,,,,,,>).MakeGenericType(types); 
				case 11:
					return typeof(DynamicTuple<,,,,,,,,,,>).MakeGenericType(types); 
				case 12:
					return typeof(DynamicTuple<,,,,,,,,,,,>).MakeGenericType(types); 
				case 13:
					return typeof(DynamicTuple<,,,,,,,,,,,,>).MakeGenericType(types); 
				case 14:
					return typeof(DynamicTuple<,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 15:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 16:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 17:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 18:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 19:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 20:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 21:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 22:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 23:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 24:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 25:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 26:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 27:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 28:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 29:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 30:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 31:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 32:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 33:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 34:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 35:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 36:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 37:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 38:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 39:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 40:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 41:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 42:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 43:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 44:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 45:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 46:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 47:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 48:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 49:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 50:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 51:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 52:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 53:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 54:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 55:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 56:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 57:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 58:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 59:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 60:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 61:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 62:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 63:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 64:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 65:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 66:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 67:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 68:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 69:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 70:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 71:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 72:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 73:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 74:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 75:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 76:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 77:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 78:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 79:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 80:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 81:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 82:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 83:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 84:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 85:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 86:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 87:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 88:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 89:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 90:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 91:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 92:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 93:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 94:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 95:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 96:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 97:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 98:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 99:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
				case 100:
					return typeof(DynamicTuple<,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,>).MakeGenericType(types); 
			}

			throw new InvalidOperationException($"The minimum is 1 and the maximus are 400 Properties for dynamic tuples.");
		}

		public static DynamicTuple Get(params Type[] types){
			return (DynamicTuple)Activator.CreateInstance(GetTupleType(types)); 
		}
	}
	public class DynamicTuple<T0> 
		: DynamicTuple
	{
		public T0 Value0 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 0){
				return Value0;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 0){
				Value0 = (T0)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1> 
		: DynamicTuple<T0>
	{
		public T1 Value1 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 1){
				return Value1;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 1){
				Value1 = (T1)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2> 
		: DynamicTuple<T0, T1>
	{
		public T2 Value2 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 2){
				return Value2;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 2){
				Value2 = (T2)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3> 
		: DynamicTuple<T0, T1, T2>
	{
		public T3 Value3 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 3){
				return Value3;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 3){
				Value3 = (T3)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4> 
		: DynamicTuple<T0, T1, T2, T3>
	{
		public T4 Value4 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 4){
				return Value4;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 4){
				Value4 = (T4)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5> 
		: DynamicTuple<T0, T1, T2, T3, T4>
	{
		public T5 Value5 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 5){
				return Value5;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 5){
				Value5 = (T5)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5>
	{
		public T6 Value6 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 6){
				return Value6;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 6){
				Value6 = (T6)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6>
	{
		public T7 Value7 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 7){
				return Value7;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 7){
				Value7 = (T7)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7>
	{
		public T8 Value8 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 8){
				return Value8;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 8){
				Value8 = (T8)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8>
	{
		public T9 Value9 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 9){
				return Value9;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 9){
				Value9 = (T9)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>
	{
		public T10 Value10 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 10){
				return Value10;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 10){
				Value10 = (T10)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
	{
		public T11 Value11 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 11){
				return Value11;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 11){
				Value11 = (T11)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
	{
		public T12 Value12 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 12){
				return Value12;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 12){
				Value12 = (T12)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
	{
		public T13 Value13 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 13){
				return Value13;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 13){
				Value13 = (T13)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
	{
		public T14 Value14 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 14){
				return Value14;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 14){
				Value14 = (T14)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
	{
		public T15 Value15 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 15){
				return Value15;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 15){
				Value15 = (T15)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
	{
		public T16 Value16 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 16){
				return Value16;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 16){
				Value16 = (T16)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
	{
		public T17 Value17 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 17){
				return Value17;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 17){
				Value17 = (T17)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
	{
		public T18 Value18 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 18){
				return Value18;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 18){
				Value18 = (T18)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
	{
		public T19 Value19 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 19){
				return Value19;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 19){
				Value19 = (T19)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
	{
		public T20 Value20 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 20){
				return Value20;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 20){
				Value20 = (T20)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
	{
		public T21 Value21 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 21){
				return Value21;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 21){
				Value21 = (T21)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
	{
		public T22 Value22 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 22){
				return Value22;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 22){
				Value22 = (T22)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
	{
		public T23 Value23 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 23){
				return Value23;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 23){
				Value23 = (T23)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
	{
		public T24 Value24 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 24){
				return Value24;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 24){
				Value24 = (T24)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
	{
		public T25 Value25 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 25){
				return Value25;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 25){
				Value25 = (T25)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>
	{
		public T26 Value26 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 26){
				return Value26;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 26){
				Value26 = (T26)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>
	{
		public T27 Value27 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 27){
				return Value27;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 27){
				Value27 = (T27)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>
	{
		public T28 Value28 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 28){
				return Value28;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 28){
				Value28 = (T28)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>
	{
		public T29 Value29 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 29){
				return Value29;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 29){
				Value29 = (T29)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>
	{
		public T30 Value30 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 30){
				return Value30;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 30){
				Value30 = (T30)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>
	{
		public T31 Value31 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 31){
				return Value31;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 31){
				Value31 = (T31)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>
	{
		public T32 Value32 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 32){
				return Value32;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 32){
				Value32 = (T32)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>
	{
		public T33 Value33 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 33){
				return Value33;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 33){
				Value33 = (T33)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33>
	{
		public T34 Value34 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 34){
				return Value34;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 34){
				Value34 = (T34)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34>
	{
		public T35 Value35 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 35){
				return Value35;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 35){
				Value35 = (T35)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35>
	{
		public T36 Value36 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 36){
				return Value36;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 36){
				Value36 = (T36)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36>
	{
		public T37 Value37 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 37){
				return Value37;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 37){
				Value37 = (T37)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37>
	{
		public T38 Value38 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 38){
				return Value38;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 38){
				Value38 = (T38)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38>
	{
		public T39 Value39 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 39){
				return Value39;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 39){
				Value39 = (T39)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39>
	{
		public T40 Value40 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 40){
				return Value40;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 40){
				Value40 = (T40)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40>
	{
		public T41 Value41 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 41){
				return Value41;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 41){
				Value41 = (T41)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41>
	{
		public T42 Value42 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 42){
				return Value42;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 42){
				Value42 = (T42)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42>
	{
		public T43 Value43 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 43){
				return Value43;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 43){
				Value43 = (T43)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43>
	{
		public T44 Value44 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 44){
				return Value44;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 44){
				Value44 = (T44)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44>
	{
		public T45 Value45 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 45){
				return Value45;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 45){
				Value45 = (T45)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45>
	{
		public T46 Value46 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 46){
				return Value46;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 46){
				Value46 = (T46)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46>
	{
		public T47 Value47 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 47){
				return Value47;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 47){
				Value47 = (T47)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47>
	{
		public T48 Value48 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 48){
				return Value48;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 48){
				Value48 = (T48)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48>
	{
		public T49 Value49 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 49){
				return Value49;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 49){
				Value49 = (T49)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49>
	{
		public T50 Value50 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 50){
				return Value50;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 50){
				Value50 = (T50)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>
	{
		public T51 Value51 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 51){
				return Value51;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 51){
				Value51 = (T51)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51>
	{
		public T52 Value52 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 52){
				return Value52;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 52){
				Value52 = (T52)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52>
	{
		public T53 Value53 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 53){
				return Value53;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 53){
				Value53 = (T53)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53>
	{
		public T54 Value54 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 54){
				return Value54;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 54){
				Value54 = (T54)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54>
	{
		public T55 Value55 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 55){
				return Value55;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 55){
				Value55 = (T55)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55>
	{
		public T56 Value56 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 56){
				return Value56;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 56){
				Value56 = (T56)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56>
	{
		public T57 Value57 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 57){
				return Value57;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 57){
				Value57 = (T57)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57>
	{
		public T58 Value58 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 58){
				return Value58;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 58){
				Value58 = (T58)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58>
	{
		public T59 Value59 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 59){
				return Value59;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 59){
				Value59 = (T59)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59>
	{
		public T60 Value60 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 60){
				return Value60;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 60){
				Value60 = (T60)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60>
	{
		public T61 Value61 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 61){
				return Value61;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 61){
				Value61 = (T61)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61>
	{
		public T62 Value62 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 62){
				return Value62;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 62){
				Value62 = (T62)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62>
	{
		public T63 Value63 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 63){
				return Value63;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 63){
				Value63 = (T63)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63>
	{
		public T64 Value64 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 64){
				return Value64;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 64){
				Value64 = (T64)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64>
	{
		public T65 Value65 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 65){
				return Value65;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 65){
				Value65 = (T65)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65>
	{
		public T66 Value66 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 66){
				return Value66;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 66){
				Value66 = (T66)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66>
	{
		public T67 Value67 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 67){
				return Value67;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 67){
				Value67 = (T67)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67>
	{
		public T68 Value68 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 68){
				return Value68;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 68){
				Value68 = (T68)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68>
	{
		public T69 Value69 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 69){
				return Value69;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 69){
				Value69 = (T69)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69>
	{
		public T70 Value70 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 70){
				return Value70;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 70){
				Value70 = (T70)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70>
	{
		public T71 Value71 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 71){
				return Value71;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 71){
				Value71 = (T71)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71>
	{
		public T72 Value72 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 72){
				return Value72;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 72){
				Value72 = (T72)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72>
	{
		public T73 Value73 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 73){
				return Value73;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 73){
				Value73 = (T73)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73>
	{
		public T74 Value74 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 74){
				return Value74;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 74){
				Value74 = (T74)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74>
	{
		public T75 Value75 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 75){
				return Value75;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 75){
				Value75 = (T75)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75>
	{
		public T76 Value76 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 76){
				return Value76;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 76){
				Value76 = (T76)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76>
	{
		public T77 Value77 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 77){
				return Value77;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 77){
				Value77 = (T77)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77>
	{
		public T78 Value78 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 78){
				return Value78;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 78){
				Value78 = (T78)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78>
	{
		public T79 Value79 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 79){
				return Value79;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 79){
				Value79 = (T79)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79>
	{
		public T80 Value80 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 80){
				return Value80;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 80){
				Value80 = (T80)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80>
	{
		public T81 Value81 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 81){
				return Value81;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 81){
				Value81 = (T81)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81>
	{
		public T82 Value82 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 82){
				return Value82;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 82){
				Value82 = (T82)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82>
	{
		public T83 Value83 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 83){
				return Value83;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 83){
				Value83 = (T83)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83>
	{
		public T84 Value84 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 84){
				return Value84;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 84){
				Value84 = (T84)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84>
	{
		public T85 Value85 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 85){
				return Value85;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 85){
				Value85 = (T85)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85>
	{
		public T86 Value86 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 86){
				return Value86;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 86){
				Value86 = (T86)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86>
	{
		public T87 Value87 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 87){
				return Value87;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 87){
				Value87 = (T87)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87>
	{
		public T88 Value88 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 88){
				return Value88;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 88){
				Value88 = (T88)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88>
	{
		public T89 Value89 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 89){
				return Value89;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 89){
				Value89 = (T89)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89>
	{
		public T90 Value90 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 90){
				return Value90;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 90){
				Value90 = (T90)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90>
	{
		public T91 Value91 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 91){
				return Value91;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 91){
				Value91 = (T91)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91>
	{
		public T92 Value92 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 92){
				return Value92;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 92){
				Value92 = (T92)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92>
	{
		public T93 Value93 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 93){
				return Value93;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 93){
				Value93 = (T93)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93>
	{
		public T94 Value94 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 94){
				return Value94;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 94){
				Value94 = (T94)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94>
	{
		public T95 Value95 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 95){
				return Value95;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 95){
				Value95 = (T95)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95>
	{
		public T96 Value96 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 96){
				return Value96;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 96){
				Value96 = (T96)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96>
	{
		public T97 Value97 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 97){
				return Value97;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 97){
				Value97 = (T97)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97, T98> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97>
	{
		public T98 Value98 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 98){
				return Value98;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 98){
				Value98 = (T98)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
	public class DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97, T98, T99> 
		: DynamicTuple<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42, T43, T44, T45, T46, T47, T48, T49, T50, T51, T52, T53, T54, T55, T56, T57, T58, T59, T60, T61, T62, T63, T64, T65, T66, T67, T68, T69, T70, T71, T72, T73, T74, T75, T76, T77, T78, T79, T80, T81, T82, T83, T84, T85, T86, T87, T88, T89, T90, T91, T92, T93, T94, T95, T96, T97, T98>
	{
		public T99 Value99 { get; set; }

		public override object GetValue(int index)
		{
			if(index == 99){
				return Value99;
			}

			return base.GetValue(index);
		}

		public override void SetValue(int index, object value)
		{
			if(index == 99){
				Value99 = (T99)value;
				return;
			}

			base.SetValue(index, value);
		}
	}
}